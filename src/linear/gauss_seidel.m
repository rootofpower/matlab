function [x, iterations, all_x] = gauss_seidel(A, b, x0, tol, max_iter)
% GAUSS_SEIDEL Розв'язання системи лінійних рівнянь методом Гаусса-Зейделя
%
% Опис методу:
% Метод Гаусса-Зейделя - це ітераційний метод для розв'язання системи
% лінійних алгебраїчних рівнянь Ax = b. Він є модифікацією методу Якобі,
% але використовує вже обчислені нові значення для поточної ітерації.
% Метод представляє систему у вигляді (D+L)x = c - Ux, де D, L, U - 
% діагональна, нижня та верхня трикутні матриці.
% Метод збігається швидше, ніж метод Якобі, якщо матриця A є діагонально домінуючою.
%
% Вхідні параметри:
%   A        - матриця коефіцієнтів СЛАР
%   b        - вектор правих частин
%   x0       - початкове наближення
%   tol      - допустима похибка
%   max_iter - максимальна кількість ітерацій
%
% Вихідні параметри:
%   x           - розв'язок СЛАР
%   iterations  - кількість ітерацій
%   all_x       - усі наближення, отримані в процесі роботи методу

% Перевірка розмірностей
[n, m] = size(A);
if n ~= m
    error('Матриця A повинна бути квадратною');
end

if length(b) ~= n
    error('Розмірність вектора b повинна відповідати розмірності матриці A');
end

if nargin < 3 || isempty(x0)
    x0 = zeros(n, 1);
end

% Ініціалізація
iterations = 0;
x = x0;
all_x = x0;

% Перевірка на нульові діагональні елементи
if any(diag(A) == 0)
    error('Метод Гаусса-Зейделя вимагає ненульових діагональних елементів');
end

% Основний цикл
while iterations < max_iter
    x_new = x; % Копія поточного наближення
    
    % Поелементне обчислення нового наближення
    for i = 1:n
        % Сума для вже обчислених нових значень (використовуємо x_new)
        sum1 = A(i, 1:i-1) * x_new(1:i-1);
        
        % Сума для ще не обчислених значень (використовуємо старі значення x)
        sum2 = A(i, i+1:n) * x(i+1:n);
        
        % Обчислення нового значення
        x_new(i) = (b(i) - sum1 - sum2) / A(i, i);
    end
    
    all_x = [all_x, x_new];
    
    % Перевірка точності
    if norm(x_new - x) < tol
        x = x_new;
        iterations = iterations + 1;
        return;
    end
    
    % Підготовка до наступної ітерації
    x = x_new;
    iterations = iterations + 1;
end

% Якщо досягнуто максимальної кількості ітерацій
warning('Досягнуто максимальної кількості ітерацій. Метод може розбігатися.');
end

% Приклад використання:
% A = [10, -1, 2; -1, 11, -1; 2, -1, 10];
% b = [6; 25; -11];
% x0 = zeros(3, 1);
% [x, iter, all_x] = gauss_seidel(A, b, x0, 1e-6, 100);
% disp('Розв''язок СЛАР:');
% disp(x);
% disp(['Кількість ітерацій: ', num2str(iter)]); 