function [root, iterations, all_x] = bisection_method(f, a, b, tol, max_iter)
% BISECTION_METHOD Знаходження кореня рівняння методом бісекції
%
% Опис методу:
% Метод бісекції (метод ділення навпіл) - це простий метод пошуку коренів, 
% заснований на теоремі про проміжне значення. Якщо f(a) і f(b) мають різні 
% знаки, то на відрізку [a,b] існує принаймні один корінь. Метод послідовно 
% ділить відрізок навпіл і вибирає ту половину, на кінцях якої функція має 
% різні знаки.
%
% Вхідні параметри:
%   f       - функція, корінь якої шукаємо
%   a, b    - кінці початкового відрізку (f(a)*f(b) < 0)
%   tol     - допустима похибка
%   max_iter - максимальна кількість ітерацій
%
% Вихідні параметри:
%   root        - знайдений корінь
%   iterations  - кількість ітерацій
%   all_x       - усі наближення, отримані в процесі роботи методу

% Перевірка умови сходимості
if f(a)*f(b) >= 0
    error('Функція повинна мати різні знаки на кінцях відрізку [a,b]');
end

% Ініціалізація
iterations = 0;
all_x = [];

% Основний цикл
while (b - a) > tol && iterations < max_iter
    % Обчислення середньої точки
    c = (a + b) / 2;
    all_x = [all_x; c];
    
    % Перевірка чи середня точка є коренем (з точністю tol)
    if abs(f(c)) < tol
        root = c;
        iterations = iterations + 1;
        return;
    end
    
    % Вибір нового відрізку
    if f(a) * f(c) < 0
        b = c;
    else
        a = c;
    end
    
    iterations = iterations + 1;
end

% Повернення результату
root = (a + b) / 2;
end

% Приклад використання:
% f = @(x) x^3 - x - 2;  % Функція f(x) = x^3 - x - 2
% [root, iter, all_x] = bisection_method(f, 1, 2, 1e-6, 100);
% disp(['Корінь: ', num2str(root)]);
% disp(['Кількість ітерацій: ', num2str(iter)]); 