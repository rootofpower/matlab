function [coeffs, y_fit] = least_squares(x, y, degree)
% LEAST_SQUARES Знаходження апроксимуючого поліному методом найменших квадратів
%
% Опис методу:
% Метод найменших квадратів - це спосіб знаходження таких коефіцієнтів 
% апроксимуючої функції, за яких сума квадратів відхилень значень функції
% від емпіричних даних буде мінімальною. У даній реалізації метод застосовується
% для побудови апроксимуючого поліному заданого степеня.
%
% Вхідні параметри:
%   x      - вектор значень аргументу
%   y      - вектор значень функції
%   degree - степінь апроксимуючого поліному
%
% Вихідні параметри:
%   coeffs - коефіцієнти апроксимуючого поліному (у порядку спадання степенів)
%   y_fit  - значення апроксимуючого поліному у точках x

% Перевірка вхідних даних
if length(x) ~= length(y)
    error('Вектори x та y повинні мати однакову довжину');
end

if degree >= length(x)
    warning('Степінь поліному перевищує кількість точок. Можливе перенавчання.');
    degree = length(x) - 1;
end

% Створення матриці Вандермонда
V = zeros(length(x), degree + 1);
for i = 1:degree + 1
    V(:, i) = x .^ (degree + 1 - i);
end

% Розв'язання нормальної системи рівнянь (V'V)c = V'y
% Метод 1: Через нормальні рівняння
% coeffs = (V' * V) \ (V' * y);

% Метод 2: Через QR-розкладання (більш стійкий чисельно)
coeffs = V \ y;

% Обчислення апроксимуючих значень
y_fit = V * coeffs;

% Обчислення похибки апроксимації
error = norm(y - y_fit) / norm(y);
fprintf('Відносна похибка апроксимації: %e\n', error);

% Візуалізація результатів (якщо потрібно)
% figure;
% plot(x, y, 'o', 'MarkerSize', 8); % Оригінальні точки
% hold on;
% 
% % Побудова кривої для більш плавного графіка
% x_fine = linspace(min(x), max(x), 100);
% y_fine = polyval(coeffs, x_fine);
% plot(x_fine, y_fine, 'r-', 'LineWidth', 2); % Апроксимуюча крива
% 
% grid on;
% legend('Дані', 'Апроксимація');
% title('Апроксимація методом найменших квадратів');
% xlabel('x');
% ylabel('y');
end

% Приклад використання:
% % Згенеруємо дані з зашумленого поліному
% x = linspace(0, 10, 20)';
% y_true = 2*x.^2 - 3*x + 1;
% y = y_true + randn(size(x)) * 5; % Додаємо шум
% 
% % Апроксимація поліномом 2-го степеня
% [coeffs, y_fit] = least_squares(x, y, 2);
% 
% % Виведення результатів
% disp('Коефіцієнти апроксимуючого поліному:');
% disp(coeffs);
% 
% % Порівняння з оригінальними коефіцієнтами
% fprintf('Оригінальні коефіцієнти: [2, -3, 1]\n');
% fprintf('Обчислені коефіцієнти: [%.4f, %.4f, %.4f]\n', coeffs(1), coeffs(2), coeffs(3)); 